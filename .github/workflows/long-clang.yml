name: Long clang

on:
  pull_request:
    types: [closed]
    branches:
      - main

  workflow_dispatch:

env:
  build-args: --enable-glpk --enable-flopoco --enable-opt --with-opt-level=2 --enable-release
  dist-pkg: bambu-clang-dist
  dist-dir: dist
  report-dir: test-reports
  storage-url: ${{secrets.CI_STORAGE_URL}}
  storage-user: "${{secrets.CI_STORAGE_USER}}"
  storage-token: "${{secrets.CI_STORAGE_TOKEN}}"
  host_jobs: $J

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, long, classA]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Env setup
        id: host
        shell: bash
        run: |
          echo "Current host supports ${{env.host_jobs}} parallel jobs"
          echo "::set-output name=jobs::${{env.host_jobs}}"
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: |
          echo "::set-output name=timestamp::$(date -u +'%Y-%m-%d-%H;%M;%S')"
      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: panda-build-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            panda-build-ccache-
      - name: Download clang compilers
        shell: bash
        run: |
          set -e
          export XZ_OPT='-T0'
          mkdir ${{env.dist-dir}}
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/clang+llvm-11.1.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/clang+llvm-10.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang+llvm-9.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/5.0.2/clang+llvm-5.0.2-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/4.0.0/clang+llvm-4.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wait
      - name: Download gcc 7
        uses: ./.github/actions/storage-download
        with:
          name: gcc-7-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Build Bambu application
        id: build
        uses: ./.github/actions/generate-bin
        with:
          config-args: ${{env.build-args}} --enable-Werror CC=clang-12 CXX=clang++-12 --with-gcc5=/bin/false
          jobs: ${{steps.host.outputs.jobs}}
      - name: Upload Panda install directory
        uses: ./.github/actions/storage-upload
        with:
          name: ${{env.dist-pkg}}
          path: ${{steps.build.outputs.appimage}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
          storage-compression: false

  gcc_regression_simple:
    if: github.event.pull_request.merged == true
    needs: [build]
    runs-on: [self-hosted, long]
    env:
      args: -c=--simulator=VERILATOR -t150m
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_CLANG4,
            I386_CLANG5,
            I386_CLANG6,
            I386_CLANG7,
            I386_CLANG8,
            I386_CLANG9,
            I386_CLANG10,
            I386_CLANG11,
            I386_CLANG12,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
        args:
          [
            "",
            "-c=--speculative-sdc-scheduling --skip_list 20040705-1,20040705-2,20040629-1",
          ]
        exclude:
          - compiler: I386_CLANG4
            script: generic_gcc_regression_simple_eg.sh
            args: ""
          - compiler: I386_CLANG5
            script: generic_gcc_regression_simple_eg_ext_pipelined.sh
            args: ""
          - compiler: I386_CLANG6
            script: generic_gcc_regression_simple_bambu.sh
            args: ""
          - compiler: I386_CLANG7
            script: generic_gcc_regression_simple_bambu.sh
            args: ""
          - compiler: I386_CLANG11
            script: generic_gcc_regression_simple_bambu.sh
            args: ""
          - compiler: I386_CLANG12
            script: generic_gcc_regression_simple_eg_ext_pipelined.sh
            args: ""
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}_${{matrix.script}}' | sed -r 's/(I386_|\.sh|generic_gcc_)//g' | tr '[:upper:]' '[:lower:]' | cut -d' ' -f1)"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  gcc_regression_simple-vhdl:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, mentor]
    env:
      args: -c=--simulator=MODELSIM -c=-wH
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        compiler:
          [
            I386_CLANG4,
            I386_CLANG5,
            I386_CLANG6,
            I386_CLANG7,
            I386_CLANG8,
            I386_CLANG9,
            I386_CLANG10,
            I386_CLANG11,
            I386_CLANG12,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}_${{matrix.script}}' | sed -r 's/(I386_|\.sh|generic_gcc_)//g' | tr '[:upper:]' '[:lower:]' | cut -d' ' -f1)_vhdl"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  simulate-all:
    if: github.event.pull_request.merged == true
    needs: [build]
    runs-on: [self-hosted, long, mentor]
    env:
      args: -c=--simulator=MODELSIM
    strategy:
      fail-fast: false
      matrix:
        include:
          - outname: all_clang_softfloat-tests
            script: all_clang_softfloat-tests.sh
          - outname: all_clang_CHStone-frontend
            script: all_clang_CHStone-frontend.sh
          - outname: all_clang_softfloat-tests-vhdl
            script: all_clang_softfloat-tests.sh -c=-wH
          - outname: all_clang_CHStone-frontend-vhdl
            script: all_clang_CHStone-frontend.sh -c=-wH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all-vhdl:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all, gcc_regression_simple-vhdl]
    runs-on: [self-hosted, long, mentor]
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        compiler:
          [
            I386_CLANG4,
            I386_CLANG5,
            I386_CLANG6,
            I386_CLANG7,
            I386_CLANG8,
            I386_CLANG9,
            I386_CLANG10,
            I386_CLANG11,
            I386_CLANG12,
          ]
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=MODELSIM -c=-wH
      basename: libm-vhdl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//g' | tr '[:upper:]' '[:lower:]')_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long]
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_CLANG4,
            I386_CLANG5,
            I386_CLANG6,
            I386_CLANG7,
            I386_CLANG8,
            I386_CLANG9,
            I386_CLANG10,
            I386_CLANG11,
            I386_CLANG12,
          ]
        args: ["", "-c=--speculative-sdc-scheduling"]
        exclude:
          - compiler: I386_CLANG4
            args: "-c=--speculatioe-sdc-scheduling"
          - compiler: I386_CLANG5
            args: "-c=--speculative-sdc-scheduling"
          - compiler: I386_CLANG6
            args: "-c=--speculative-sdc-scheduling"
          - compiler: I386_CLANG7
            args: "-c=--speculative-sdc-scheduling"
          - compiler: I386_CLANG11
            args: "-c=--speculative-sdc-scheduling"
          - compiler: I386_CLANG12
            args: "-c=--speculative-sdc-scheduling"
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=VERILATOR -t150m
      basename: libm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          OUTNAME+="_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}
