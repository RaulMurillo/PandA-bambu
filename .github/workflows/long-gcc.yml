name: Long gcc

on:
  pull_request:
    types: [closed]
    branches:
      - main

  workflow_dispatch:

env:
  build-args: --enable-glpk --enable-flopoco --enable-opt --with-opt-level=2 --enable-release
  dist-pkg: bambu-gcc-dist
  dist-dir: dist
  report-dir: test-reports
  storage-url: ${{secrets.CI_STORAGE_URL}}
  storage-user: "${{secrets.CI_STORAGE_USER}}"
  storage-token: "${{secrets.CI_STORAGE_TOKEN}}"
  host_jobs: $J

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, long, classA]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Env setup
        id: host
        shell: bash
        run: |
          echo "Current host supports ${{env.host_jobs}} parallel jobs"
          echo "::set-output name=jobs::${{env.host_jobs}}"
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: |
          echo "::set-output name=timestamp::$(date -u +'%Y-%m-%d-%H;%M;%S')"
      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: panda-build-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            panda-build-ccache-
      - name: Download clang compilers
        shell: bash
        run: |
          set -e
          export XZ_OPT='-T0'
          mkdir ${{env.dist-dir}}
          wget https://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf -
      - name: Download gcc 4.5
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.5-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 4.6
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.6-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 4.7
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.7-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 4.8
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.8-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 4.9
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.9-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 5
        uses: ./.github/actions/storage-download
        with:
          name: gcc-5-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 6
        uses: ./.github/actions/storage-download
        with:
          name: gcc-6-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 7
        uses: ./.github/actions/storage-download
        with:
          name: gcc-7-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Download gcc 8
        uses: ./.github/actions/storage-download
        with:
          name: gcc-8-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: "${{env.storage-url}}"
          storage-path: compilers
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Build Bambu application
        id: build
        uses: ./.github/actions/generate-bin
        with:
          config-args: ${{env.build-args}} --enable-Werror CC=gcc-8 CXX=g++-8
          jobs: ${{steps.host.outputs.jobs}}
      - name: Upload Panda install directory
        uses: ./.github/actions/storage-upload
        with:
          name: ${{env.dist-pkg}}
          path: ${{steps.build.outputs.appimage}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
          storage-compression: false

  gcc_regression_simple:
    if: github.event.pull_request.merged == true
    needs: [build]
    runs-on: [self-hosted, long]
    env:
      basename: regression_simple
      args: -c=--simulator=VERILATOR -t150m
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
        args:
          [
            "",
            "-c=--speculative-sdc-scheduling --skip_list 20040705-1,20040705-2,20040629-1,memset-3",
          ]
        exclude:
          - compiler: I386_GCC49
            script: generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1
          - compiler: I386_GCC49
            script: generic_gcc_regression_simple_eg_ext_pipelined.sh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}_${{matrix.script}}' | sed -r 's/(I386_|\.sh|generic_gcc_)//g' | tr '[:upper:]' '[:lower:]' | cut -d' ' -f1)"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  gcc_regression_simple-vhdl:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, mentor]
    env:
      basename: regression_simple-vhdl
      args: -c=--simulator=MODELSIM -c=-wH
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        script:
          [
            generic_gcc_regression_simple_bambu_pretty_print.sh --skip_list 20071029-1,
            generic_gcc_regression_simple_bambu.sh,
            generic_gcc_regression_simple_eg_ext_pipelined.sh,
            generic_gcc_regression_simple_eg.sh,
          ]
        exclude:
          - compiler: I386_GCC7
            script: generic_gcc_regression_simple_bambu.sh
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}_${{matrix.script}}' | sed -r 's/(I386_|\.sh|generic_gcc_)//g' | tr '[:upper:]' '[:lower:]' | cut -d' ' -f1)_vhdl"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  simulate-all:
    if: github.event.pull_request.merged == true
    needs: [build]
    runs-on: [self-hosted, long, mentor]
    env:
      args: -c=--simulator=MODELSIM
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        include:
          - outname: all_gcc_softfloat-tests
            script: all_gcc_softfloat-tests.sh
          - outname: all_gcc_CHStone-frontend
            script: all_gcc_CHStone-frontend.sh
          - outname: all_gcc_softfloat-tests-vhdl
            script: all_gcc_softfloat-tests.sh -c=-wH
          - outname: all_gcc_CHStone-frontend-vhdl
            script: all_gcc_CHStone-frontend.sh -c=-wH
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{matrix.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all-vhdl:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all, gcc_regression_simple-vhdl]
    runs-on: [self-hosted, long, mentor]
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=MODELSIM -c=-wH
      basename: libm-vhdl
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//g' | tr '[:upper:]' '[:lower:]')_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  libm-all:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long]
    strategy:
      fail-fast: false
      matrix:
        compiler:
          [
            I386_GCC45,
            I386_GCC46,
            I386_GCC47,
            I386_GCC48,
            I386_GCC49,
            I386_GCC5,
            I386_GCC6,
            I386_GCC7,
            I386_GCC8,
          ]
        args: ["", "-c=--speculative-sdc-scheduling"]
    env:
      script: generic_libm-tests.sh
      args: -c=--simulator=VERILATOR -t150m
      basename: libm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//g' | tr '[:upper:]' '[:lower:]')"
          if [[ "${{matrix.args}}" = *-c=--speculative-sdc-scheduling* ]]; then
            OUTNAME+="_sdc"
          fi
          OUTNAME+="_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test suite
        id: suite
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          ./panda_regressions/hls/${{env.script}} --returnfail --junitdir="$out_dir" --csv="$out_dir/perf.csv" --table="$out_dir/perf.tex" -c=--compiler=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.suite.outputs.test-reports-dir}}

  example-altera:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, altera, intelFPGA]
    timeout-minutes: 600
    env:
      basename: altera
      args: --spider-style="latex_format_bambu_results_altera.xml" -c=--evaluation -t120m
    strategy:
      fail-fast: false
      matrix:
        include:
          - basename: softfloat
            script: ./examples/softfloat/generic_softfloat.sh
            batch: "5CSEMA5F31C6_6.6,5CSEMA5F31C6_10.0,5SGXEA7N2F45C1_3.3,5SGXEA7N2F45C1_10.0,EP2C70F896C6-R_10.0,5CSEMA5F31C6_6.6 --flopoco,5CSEMA5F31C6_10.0 --flopoco,5SGXEA7N2F45C1_3.3 --flopoco,5SGXEA7N2F45C1_10.0 --flopoco,EP2C70F896C6-R_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: truefloat
            script: ./examples/truefloat/generic_truefloat.sh
            batch: "5CSEMA5F31C6_6.6,5CSEMA5F31C6_10.0,5SGXEA7N2F45C1_3.3,5SGXEA7N2F45C1_10.0,EP2C70F896C6-R_10.0"
            compiler: I386_GCC49
          - basename: libm
            script: ./examples/libm/generic_libm.sh
            batch: "5CSEMA5F31C6_6.6,5CSEMA5F31C6_7.5,5CSEMA5F31C6_10.0,5SGXEA7N2F45C1_3.3,5SGXEA7N2F45C1_5.0,5SGXEA7N2F45C1_10.0,EP2C70F896C6-R_10.0"
            compiler: I386_GCC49
          - basename: libm-flopoco
            script: ./examples/libm/generic_libm.sh
            batch: "5CSEMA5F31C6_6.6 --flopoco,5CSEMA5F31C6_7.5 --flopoco,5CSEMA5F31C6_10.0 --flopoco,5SGXEA7N2F45C1_3.3 --flopoco,5SGXEA7N2F45C1_5.0 --flopoco,5SGXEA7N2F45C1_10.0 --flopoco,EP2C70F896C6-R_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: CHStone_O2
            script: ./examples/CHStone/generic_CHStone.sh
            compiler: I386_GCC49
            args: -c=--experimental-setup=BAMBU-BALANCED-MP
            batch: "5CSEMA5F31C6_10.0 --aligned-access,5CSEMA5F31C6_15.0 --aligned-access,5SGXEA7N2F45C1_5.0 --aligned-access,5SGXEA7N2F45C1_10.0 --aligned-access,EP2C70F896C6-R_10.0 --aligned-access,EP2C70F896C6-R_15.0 --aligned-access"
          - basename: CHStone_O3
            script: ./examples/CHStone/generic_CHStone.sh -lchstone_altera_O3_list
            compiler: I386_GCC49
            args: -c=--experimental-setup=BAMBU-PERFORMANCE-MP
            batch: "5CSEMA5F31C6_10.0,5CSEMA5F31C6_15.0,5SGXEA7N2F45C1_5.0,5SGXEA7N2F45C1_10.0,EP2C70F896C6-R_10.0,EP2C70F896C6-R_15.0"
          - basename: hls_study
            script: ./examples/hls_study/generic_hls_study.sh
            compiler: I386_GCC49
            batch: "5SGXEA7N2F45C1_2.5 --aligned-access"
          - basename: omp_simd
            script: ./examples/omp_simd/generic_omp_simd.sh
            compiler: I386_GCC49
            batch: "5SGXEA7N2F45C1_10.0"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//' | tr '[:upper:]' '[:lower:]')_${{matrix.basename}}_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test batch
        id: batch
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          IFS=',' read -r -a configurations <<< "${{matrix.batch}}"
          for configuration in "${configurations[@]}"
          do
            unset device
            unset period
            unset args
            IFS='_ ' read device period args <<< "$configuration"
            echo "::group::Run for ${device} at ${period} ${args[@]/#/'with additional args '}"
            IFS=' ' read -r -a args <<< "$args"
            config_name="${device}_${period}$(sed -e 's/\([-]\+\)/_/g' <<< $args)"
            config_out="$out_dir/$config_name"
            ${{env.script}} --returnfail --junitdir="$config_out" --csv="$config_out/${basename}_${config_name}.csv" --table="$config_out/${basename}_${config_name}.tex" -c=--compiler=${{matrix.compiler}} -c=--device-name=${device} -c=--clock-period=${period} ${{env.args}} ${{matrix.args}} ${args[@]/#/-c=}
            echo "::endgroup::"
          done
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.batch.outputs.test-reports-dir}}

  example-xilinx:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, xilinx]
    timeout-minutes: 600
    env:
      basename: xilinx
      args: --spider-style="latex_format_bambu_results_xilinx.xml" -c=--evaluation -t120m
    strategy:
      fail-fast: false
      matrix:
        include:
          - basename: softfloat
            script: ./examples/softfloat/generic_softfloat.sh
            batch: "xc7vx330t-1ffg1157_10.0,xc7vx690t-3ffg1930-VVD_5.0,xc7vx690t-3ffg1930-VVD_10.0,xc7z020-1clg484-VVD_5.0,xc7z020-1clg484-VVD_10.0,xc7vx330t-1ffg1157_10.0 --flopoco,xc7vx690t-3ffg1930-VVD_5.0 --flopoco,xc7vx690t-3ffg1930-VVD_10.0 --flopoco,xc7z020-1clg484-VVD_5.0 --flopoco,xc7z020-1clg484-VVD_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: truefloat
            script: ./examples/truefloat/generic_truefloat.sh
            batch: "xc7vx330t-1ffg1157_10.0,xc7vx690t-3ffg1930-VVD_5.0,xc7vx690t-3ffg1930-VVD_10.0,xc7z020-1clg484-VVD_5.0,xc7z020-1clg484-VVD_10.0"
            compiler: I386_GCC49
          - basename: libm
            script: ./examples/libm/generic_libm.sh
            batch: "xc7vx330t-1ffg1157_10.0,xc7vx690t-3ffg1930-VVD_5.0,xc7vx690t-3ffg1930-VVD_10.0,xc7z020-1clg484-VVD_5.0,xc7z020-1clg484-VVD_10.0"
            compiler: I386_GCC49
          - basename: libm-flopoco
            script: ./examples/libm/generic_libm.sh
            batch: "xc7vx330t-1ffg1157_10.0 --flopoco,xc7vx690t-3ffg1930-VVD_5.0 --flopoco,xc7vx690t-3ffg1930-VVD_10.0 --flopoco,xc7z020-1clg484-VVD_5.0 --flopoco,xc7z020-1clg484-VVD_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: CHStone_O2
            script: ./examples/CHStone/generic_CHStone.sh
            compiler: I386_GCC49
            args: -c=--experimental-setup=BAMBU-BALANCED-MP
            batch: "xc7vx330t-1ffg1157_10.0 --aligned-access,xc7vx690t-3ffg1930-VVD_5.0 --aligned-access,xc7vx690t-3ffg1930-VVD_10.0 --aligned-access,xc7z020-1clg484-VVD_10.0 --aligned-access,xc7z020-1clg484-VVD_15.0 --aligned-access"
          - basename: CHStone_O3
            script: ./examples/CHStone/generic_CHStone.sh -lchstone_altera_O3_list
            compiler: I386_GCC49
            args: -c=--experimental-setup=BAMBU-PERFORMANCE-MP
            batch: "xc7vx330t-1ffg1157_10.0,xc7vx690t-3ffg1930-VVD_5.0,xc7vx690t-3ffg1930-VVD_10.0,xc7z020-1clg484-VVD_10.0,xc7z020-1clg484-VVD_15.0"
          - basename: MachSuite
            script: ./examples/MachSuite/generic_MachSuite.sh
            compiler: I386_GCC49
            batch: "xc7vx690t-3ffg1930-VVD_10.0"
          - basename: hls_study
            script: ./examples/hls_study/generic_hls_study.sh
            compiler: I386_GCC49
            batch: "xc7vx690t-3ffg1930-VVD_2.5 --aligned-access"
          - basename: omp_simd
            script: ./examples/omp_simd/generic_omp_simd.sh
            compiler: I386_GCC49
            batch: "xc7vx690t-3ffg1930-VVD_10.0"
          - basename: parallel_queries
            script: ./examples/parallel_queries/context_switch_xilinx_10_1DB_simulate.sh
            compiler: I386_GCC49
            args: -c=--evaluation=CYCLES
            batch: "xc7vx690t-3ffg1930-VVD_10.0"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//' | tr '[:upper:]' '[:lower:]')_${{matrix.basename}}_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test batch
        id: batch
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          IFS=',' read -r -a configurations <<< "${{matrix.batch}}"
          for configuration in "${configurations[@]}"
          do
            unset device
            unset period
            unset args
            IFS='_ ' read device period args <<< "$configuration"
            echo "::group::Run for ${device} at ${period} ${args[@]/#/'with additional args '}"
            IFS=' ' read -r -a args <<< "$args"
            config_name="${device}_${period}$(sed -e 's/\([-]\+\)/_/g' <<< $args)"
            config_out="$out_dir/$config_name"
            ${{env.script}} --returnfail --junitdir="$config_out" --csv="$config_out/${basename}_${config_name}.csv" --table="$config_out/${basename}_${config_name}.tex" -c=--compiler=${{matrix.compiler}} -c=--device-name=${device} -c=--clock-period=${period} ${{env.args}} ${{matrix.args}} ${args[@]/#/-c=}
            echo "::endgroup::"
          done
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.batch.outputs.test-reports-dir}}

  example-lattice:
    if: github.event.pull_request.merged == true
    needs: [build, simulate-all]
    runs-on: [self-hosted, long, lattice]
    env:
      basename: lattice
      args: --spider-style="latex_format_bambu_results_lattice.xml" -c=--evaluation -t120m
    strategy:
      fail-fast: false
      matrix:
        include:
          - basename: softfloat
            script: ./examples/softfloat/generic_softfloat.sh
            batch: "LFE335EA8FN484C_10.0,LFE335EA8FN484C_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: truefloat
            script: ./examples/truefloat/generic_truefloat.sh
            batch: "LFE335EA8FN484C_10.0"
            compiler: I386_GCC49
          - basename: libm
            script: ./examples/libm/generic_libm.sh
            batch: "LFE335EA8FN484C_10.0,LFE335EA8FN484C_10.0 --flopoco"
            compiler: I386_GCC49
          - basename: CHStone
            script: ./examples/CHStone/generic_CHStone.sh
            compiler: I386_GCC49
            args: -c=--experimental-setup=BAMBU-BALANCED-MP
            batch: "LFE335EA8FN484C_15.0 -O2 --aligned-access --experimental-setup=BAMBU-BALANCED-MP,LFE335EA8FN484C_15.0 -O3 --experimental-setup=BAMBU-PERFORMANCE-MP"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Download Bambu AppImage
        uses: ./.github/actions/storage-download
        with:
          name: ${{env.dist-pkg}}
          storage-url: "${{env.storage-url}}"
          username: "${{env.storage-user}}"
          password: "${{env.storage-token}}"
      - name: Setup binaries
        id: setup
        shell: bash
        run: |
          mkdir bin
          ln -s $PWD/*.AppImage bin/bambu
          ln -s $PWD/*.AppImage bin/spider
          echo "::set-output name=local-bin::$PWD/bin"
      - name: Generate out name
        id: get
        shell: bash
        run: |
          OUTNAME="$(echo '${{matrix.compiler}}' | sed 's/I386_//' | tr '[:upper:]' '[:lower:]')_${{matrix.basename}}_${{env.basename}}"
          echo "::set-output name=outname::$OUTNAME"
      - name: Launch test batch
        id: batch
        shell: bash
        run: |
          export PATH=${{steps.setup.outputs.local-bin}}:$PATH
          mkdir ${{env.report-dir}}
          out_dir="$PWD/${{env.report-dir}}"
          echo "::set-output name=test-reports-dir::$out_dir"
          IFS=',' read -r -a configurations <<< "${{matrix.batch}}"
          for configuration in "${configurations[@]}"
          do
            unset device
            unset period
            unset args
            IFS='_ ' read device period args <<< "$configuration"
            echo "::group::Run for ${device} at ${period} ${args[@]/#/'with additional args '}"
            IFS=' ' read -r -a args <<< "$args"
            config_name="${device}_${period}$(sed -e 's/\([-]\+\)/_/g' <<< $args)"
            config_out="$out_dir/$config_name"
            ${{env.script}} --returnfail --junitdir="$config_out" --csv="$config_out/${basename}_${config_name}.csv" --table="$config_out/${basename}_${config_name}.tex" -c=--compiler=${{matrix.compiler}} -c=--device-name=${device} -c=--clock-period=${period} ${{env.args}} ${{matrix.args}} ${args[@]/#/-c=}
            echo "::endgroup::"
          done
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.get.outputs.outname}}
          path: ${{steps.batch.outputs.test-reports-dir}}
