name: CPP Checks

on:
  pull_request:

  workflow_dispatch:

concurrency:
  group: codechecks-${{ github.ref }}
  cancel-in-progress: true

env:
  storage-url: ${{secrets.CI_STORAGE_URL}}
  storage-user: '${{secrets.CI_STORAGE_USER}}'
  storage-token: '${{secrets.CI_STORAGE_TOKEN}}'
  host_jobs: $J

jobs:
  cppcheck:
    runs-on: [self-hosted]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Env setup
        id: host
        shell: bash
        run: |
          echo "Current host supports ${{env.host_jobs}} parallel jobs"
          echo "::set-output name=jobs::${{env.host_jobs}}"
      - name: Run CPP checks on Bambu source
        id: cppcheck
        uses: ./.github/actions/cppcheck
        with:
          jobs: ${{steps.host.outputs.jobs}}
          args: --enable=all --force --suppress=unusedFunction --suppress=unmatchedSuppression --inline-suppr
      - name: Upload cppcheck HTML report
        uses: actions/upload-artifact@v2
        with:
          name: CPPCheck-report
          path: ${{steps.cppcheck.outputs.report-dir}}
      - name: CPPCheck found too many errors
        uses: actions/github-script@v4
        if: ${{ steps.cppcheck.outputs.error-count > 20 }}
        with:
          script: core.setFailed('Too many errors detected from cppcheck')

  clang-check:
    runs-on: [self-hosted]
    env:
      dist-dir: dist
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Env setup
        id: host
        shell: bash
        run: |
          echo "Current host supports ${{env.host_jobs}} parallel jobs"
          echo "::set-output name=jobs::${{env.host_jobs}}"
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: |
          echo "::set-output name=timestamp::$(date -u +'%Y-%m-%d-%H;%M;%S')"
      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: scanbuild-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            scanbuild-ccache-
      - name: Download clang compilers
        shell: bash
        run: |
          set -e
          export XZ_OPT='-T0'
          mkdir ${{env.dist-dir}}
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/clang+llvm-11.1.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/5.0.2/clang+llvm-5.0.2-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/4.0.0/clang+llvm-4.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wait
      - name: Download gcc 4.9
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.9-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 5
        uses: ./.github/actions/storage-download
        with:
          name: gcc-5-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 6
        uses: ./.github/actions/storage-download
        with:
          name: gcc-6-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 7
        uses: ./.github/actions/storage-download
        with:
          name: gcc-7-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 8
        uses: ./.github/actions/storage-download
        with:
          name: gcc-8-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Scan build Bambu
        id: scanbuild
        uses: ./.github/actions/scanbuild
        with:
          jobs: ${{steps.host.outputs.jobs}}
          config-args: CC=clang-11 CXX=clang++-11 --disable-release --enable-flopoco --enable-glpk
      - name: Upload scan-build report
        uses: actions/upload-artifact@v2
        with:
          name: scanbuild-report
          path: ${{steps.scanbuild.outputs.report-dir}}

  make-dist:
    runs-on: [self-hosted, classA]
    env:
      dist-dir: dist
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Env setup
        id: host
        shell: bash
        run: |
          echo "Current host supports ${{env.host_jobs}} parallel jobs"
          echo "::set-output name=jobs::${{env.host_jobs}}"
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: bash
        run: |
          echo "::set-output name=timestamp::$(date -u +'%Y-%m-%d-%H;%M;%S')"
      - name: ccache cache files
        uses: actions/cache@v2
        with:
          path: .ccache
          key: makedist-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            makedist-ccache-
      - name: Download clang compilers
        shell: bash
        run: |
          set -e
          export XZ_OPT='-T0'
          mkdir ${{env.dist-dir}}
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/clang+llvm-11.1.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/7.0.1/clang+llvm-7.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/5.0.2/clang+llvm-5.0.2-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wget https://releases.llvm.org/4.0.0/clang+llvm-4.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz -nv -O - | tar -C ${{env.dist-dir}} -xJf - &
          wait
      - name: Download gcc 4.9
        uses: ./.github/actions/storage-download
        with:
          name: gcc-4.9-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 5
        uses: ./.github/actions/storage-download
        with:
          name: gcc-5-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 6
        uses: ./.github/actions/storage-download
        with:
          name: gcc-6-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 7
        uses: ./.github/actions/storage-download
        with:
          name: gcc-7-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Download gcc 8
        uses: ./.github/actions/storage-download
        with:
          name: gcc-8-bambu-Ubuntu_16.04
          path: ./${{env.dist-dir}}
          storage-url: '${{env.storage-url}}'
          storage-path: compilers
          username: '${{env.storage-user}}'
          password: '${{env.storage-token}}'
      - name: Make Dist
        uses: ./.github/actions/make-dist
        with:
          jobs: ${{steps.host.outputs.jobs}}
          config-args: CC=gcc-8 CXX=g++-8 --enable-release --enable-opt --enable-flopoco
