/*============================================================================

This C source fragment is part of the SoftFloat IEC/IEEE Floating-point
Arithmetic Package, Release 2b.

Written by John R. Hauser.  This work was made possible in part by the
International Computer Science Institute, located at Suite 600, 1947 Center
Street, Berkeley, California 94704.  Funding was partially provided by the
National Science Foundation under grant MIP-9311980.  The original version
of this code was written as part of a project to build a fixed-point vector
processor in collaboration with the University of California at Berkeley,
overseen by Profs. Nelson Morgan and John Wawrzynek.  More information
is available through the Web page `http://www.cs.berkeley.edu/~jhauser/
arithmetic/SoftFloat.html'.

THIS SOFTWARE IS DISTRIBUTED AS IS, FOR FREE.  Although reasonable effort has
been made to avoid it, THIS SOFTWARE MAY CONTAIN FAULTS THAT WILL AT TIMES
RESULT IN INCORRECT BEHAVIOR.  USE OF THIS SOFTWARE IS RESTRICTED TO PERSONS
AND ORGANIZATIONS WHO CAN AND WILL TAKE FULL RESPONSIBILITY FOR ALL LOSSES,
COSTS, OR OTHER PROBLEMS THEY INCUR DUE TO THE SOFTWARE, AND WHO FURTHERMORE
EFFECTIVELY INDEMNIFY JOHN HAUSER AND THE INTERNATIONAL COMPUTER SCIENCE
INSTITUTE (possibly via similar legal warning) AGAINST ALL LOSSES, COSTS, OR
OTHER PROBLEMS INCURRED BY THEIR CUSTOMERS AND CLIENTS DUE TO THE SOFTWARE.

Derivative works are acceptable, even for commercial purposes, so long as
(1) the source code for the derivative work includes prominent notice that
the work is derivative, and (2) the source code includes prominent notice with
these four paragraphs for those parts of this code that are retained.

=============================================================================*/

/*----------------------------------------------------------------------------
| Underflow tininess-detection mode, statically initialized to default value.
| (The declaration in `softfloat.h' must match the `__int8' type here.)
*----------------------------------------------------------------------------*/
#ifndef NO_PARAMETRIC
__int8 __float_detect_tininess = float_tininess_after_rounding;
#endif
/*----------------------------------------------------------------------------
| Raises the exceptions specified by `flags'.  Floating-point traps can be
| defined here if desired.  It is currently not possible for such a trap
| to substitute a result value.  If traps are not implemented, this routine
| should be simply `__float_exception_flags |= flags;'.
*----------------------------------------------------------------------------*/

void __float_raise(__int8 flags)
{
#ifndef NO_PARAMETRIC
   __float_exception_flags |= flags;
#endif
}

/*----------------------------------------------------------------------------
| Internal canonical NaN format.
*----------------------------------------------------------------------------*/
typedef struct
{
   __flag sign;
   __bits64 high, low;
} __commonNaNT;

/*----------------------------------------------------------------------------
| The pattern for a default generated arbitrary-precision quiet NaN.
*----------------------------------------------------------------------------*/
#define __float_nan(__exp_bits, __frac_bits, __sign) ((((__bits64)(__sign == -1)) << (__exp_bits + __frac_bits)) | (((1LL << __exp_bits) - 1) << __frac_bits) | (1LL << (__frac_bits - 1)))

/*----------------------------------------------------------------------------
| The pattern for a default generated single-precision NaN.
*----------------------------------------------------------------------------*/
#define __float32_default_nan 0xFFC00000

/*----------------------------------------------------------------------------
| Returns 1 if the arbitrary-precision floating-point value `a' is a NaN;
| otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __float32_is_nan(__float32 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((a >> __frac_bits) & ((1ULL << __exp_bits) - 1)) == ((1ULL << __exp_bits) - 1)) && ((a & ((1ULL << __frac_bits) - 1)) != 0);
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns 1 if the single-precision floating-point value `a' is a NaN;
| otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __float32_is_nan_ieee(__float32 a)
{
   return (0xFF000000 < (__bits32)(a << 1));
}

/*----------------------------------------------------------------------------
| Returns 1 if the arbitrary-precision floating-point value `a' is a signaling
| NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __float32_is_signaling_nan(__float32 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((a >> (__frac_bits - 1)) & ((1 << (__exp_bits + 1)) - 1)) == ((1 << (__exp_bits + 1)) - 2)) && (a & ((1 << (__frac_bits - 1)) - 1));
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns 1 if the single-precision floating-point value `a' is a signaling
| NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __float32_is_signaling_nan_ieee(__float32 a)
{
   return (((a >> 22) & 0x1FF) == 0x1FE) && (a & 0x003FFFFF);
}

/*----------------------------------------------------------------------------
| Returns the result of converting the arbitrary-precision floating-point NaN
| `a' to the canonical NaN format.  If `a' is a signaling NaN, the invalid
| exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __float32ToCommonNaN(__float32 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   __commonNaNT z;

   if(__float32_is_signaling_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign))
      __float_raise(float_flag_invalid);
   z.sign = __sign == -1 ? (a >> (__exp_bits + __frac_bits)) : __sign;
   z.low = 0;
   z.high = ((__bits64)a) << (64 - __frac_bits);
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the single-precision floating-point NaN
| `a' to the canonical NaN format.  If `a' is a signaling NaN, the invalid
| exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __float32ToCommonNaN_ieee(__float32 a)
{
   __commonNaNT z;

   if(__float32_is_signaling_nan_ieee(a))
      __float_raise(float_flag_invalid);
   z.sign = a >> 31;
   z.low = 0;
   z.high = ((__bits64)a) << 41;
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the arbitrary-
| precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float32 __commonNaNToFloat32(__commonNaNT a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((__bits32)(a.sign & (__sign == -1))) << (__exp_bits + __frac_bits)) | (((1 << __exp_bits) - 1) << __frac_bits) | (a.high >> (64 - __frac_bits));
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the single-
| precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float32 __commonNaNToFloat32_ieee(__commonNaNT a)
{
   return (((__bits32)a.sign) << 31) | 0x7FC00000 | (a.high >> 41);
}

static __FORCE_INLINE __float32 __LargerSignificand32(__float32 a, __float32 b, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   __bits32 _a, _b;
   _a = a & ((1 << (__exp_bits + __frac_bits)) - 1);
   _b = b & ((1 << (__exp_bits + __frac_bits)) - 1);
   if(a < b)
   {
      return b;
   }
   if(a == b)
   {
      return (__sign == -1) ? ((a >> (__exp_bits + __frac_bits)) ? b : a) : a;
   }
   return a;
}

static __FORCE_INLINE __float32 __LargerSignificand32_ieee(__float32 a, __float32 b)
{
   if((__bits32)(a << 1) < (__bits32)(b << 1))
      return b;
   if((__bits32)(b << 1) < (__bits32)(a << 1))
      return a;
   return (a < b) ? a : b;
}

/*----------------------------------------------------------------------------
| Takes two arbitrary-precision floating-point values `a' and `b', one of which
| is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float32 __propagateFloat32NaN(__float32 a, __float32 b, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
#ifdef NO_SIGNALLING
   return __float_nan(__exp_bits, __frac_bits, __sign);
#else
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __float32_is_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   aIsSignalingNaN = __float32_is_signaling_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   bIsNaN = __float32_is_nan(b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   bIsSignalingNaN = __float32_is_signaling_nan(b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   a |= (1 << (__frac_bits - 1));
   b |= (1 << (__frac_bits - 1));
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificand32(a, b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificand32(a, b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   }
   else
   {
      return b;
   }
#endif
}

/*----------------------------------------------------------------------------
| Takes two single-precision floating-point values `a' and `b', one of which
| is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float32 __propagateFloat32NaN_ieee(__float32 a, __float32 b)
{
#ifdef NO_SIGNALLING
   return __float32_default_nan;
#else
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __float32_is_nan_ieee(a);
   aIsSignalingNaN = __float32_is_signaling_nan_ieee(a);
   bIsNaN = __float32_is_nan_ieee(b);
   bIsSignalingNaN = __float32_is_signaling_nan_ieee(b);
   a |= 0x00400000;
   b |= 0x00400000;
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificand32_ieee(a, b);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificand32_ieee(a, b);
   }
   else
   {
      return b;
   }
#endif
}

/*----------------------------------------------------------------------------
| The pattern for a default generated double-precision NaN.
*----------------------------------------------------------------------------*/
#define __float64_default_nan LIT64(0xFFF8000000000000)

/*----------------------------------------------------------------------------
| Returns 1 if the custom-precision floating-point value `a' is a NaN;
| otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __float64_is_nan(__float64 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((a >> __frac_bits) & ((1ULL << __exp_bits) - 1)) == ((1ULL << __exp_bits) - 1)) && ((a & ((1ULL << __frac_bits) - 1)) != 0);
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns 1 if the double-precision floating-point value `a' is a NaN;
| otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __float64_is_nan_ieee(__float64 a)
{
   return (LIT64(0xFFE0000000000000) < (__bits64)(a << 1));
}

/*----------------------------------------------------------------------------
| Returns 1 if the custom precision floating-point value `a' is a signaling
| NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __float64_is_signaling_nan(__float64 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((a >> (__frac_bits - 1)) & ((1ULL << (__exp_bits + 1)) - 1)) == ((1ULL << (__exp_bits + 1)) - 2)) && ((a & ((1ULL << (__frac_bits - 1)) - 1)) != 0);
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns 1 if the double-precision floating-point value `a' is a signaling
| NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __float64_is_signaling_nan_ieee(__float64 a)
{
   return (((a >> 51) & 0xFFF) == 0xFFE) && (a & LIT64(0x0007FFFFFFFFFFFF));
}

/*----------------------------------------------------------------------------
| Returns the result of converting the arbitrary-precision floating-point NaN
| `a' to the canonical NaN format.  If `a' is a signaling NaN, the invalid
| exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __float64ToCommonNaN(__float64 a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   __commonNaNT z;

   if(__float64_is_signaling_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign))
      __float_raise(float_flag_invalid);
   z.sign = __sign == -1 ? (a >> (__exp_bits + __frac_bits)) : __sign;
   z.low = 0;
   z.high = a << (64 - __frac_bits);
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the double-precision floating-point NaN
| `a' to the canonical NaN format.  If `a' is a signaling NaN, the invalid
| exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __float64ToCommonNaN_ieee(__float64 a)
{
   __commonNaNT z;

   if(__float64_is_signaling_nan_ieee(a))
      __float_raise(float_flag_invalid);
   z.sign = a >> 63;
   z.low = 0;
   z.high = a << 12;
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the arbitrary-
| precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float64 __commonNaNToFloat64(__commonNaNT a, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   if(__nan)
   {
      return (((__bits64)(a.sign & (__sign == -1))) << (__exp_bits + __frac_bits)) | (((1ULL << __exp_bits) - 1) << __frac_bits) | (a.high >> (64 - __frac_bits));
   }
   else
   {
      return 0;
   }
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the double-
| precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float64 __commonNaNToFloat64_ieee(__commonNaNT a)
{
   return (((__bits64)a.sign) << 63) | LIT64(0x7FF8000000000000) | (a.high >> 12);
}

static __FORCE_INLINE __float64 __LargerSignificand64(__float64 a, __float64 b, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
   __bits64 _a, _b;
   _a = a & ((1ULL << (__exp_bits + __frac_bits)) - 1);
   _b = b & ((1ULL << (__exp_bits + __frac_bits)) - 1);
   if(a < b)
   {
      return b;
   }
   if(a == b)
   {
      return (__sign == -1) ? ((a >> (__exp_bits + __frac_bits)) ? b : a) : a;
   }
   return a;
}

static __FORCE_INLINE __float64 __LargerSignificand64_ieee(__float64 a, __float64 b)
{
   if((__bits64)(a << 1) < (__bits64)(b << 1))
      return b;
   if((__bits64)(b << 1) < (__bits64)(a << 1))
      return a;
   return (a < b) ? a : b;
}

/*----------------------------------------------------------------------------
| Takes two arbitrary-precision floating-point values `a' and `b', one of which
| is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float64 __propagateFloat64NaN(__float64 a, __float64 b, __bits8 __exp_bits, __bits8 __frac_bits, __sbits32 __exp_bias, __flag __rounding, __flag __nan, __flag __one, __flag __subnorm, __sbits8 __sign)
{
#ifdef NO_SIGNALLING
   return __float_nan(__exp_bits, __frac_bits, __sign);
#else
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __float64_is_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   aIsSignalingNaN = __float64_is_signaling_nan(a, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   bIsNaN = __float64_is_nan(b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   bIsSignalingNaN = __float64_is_signaling_nan(b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   a |= (1ULL << (__frac_bits - 1));
   b |= (1ULL << (__frac_bits - 1));
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificand64(a, b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificand64(a, b, __exp_bits, __frac_bits, __exp_bias, __rounding, __nan, __one, __subnorm, __sign);
   }
   else
   {
      return b;
   }
#endif
}

/*----------------------------------------------------------------------------
| Takes two double-precision floating-point values `a' and `b', one of which
| is a NaN, and returns the appropriate NaN result.  If either `a' or `b' is a
| signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float64 __propagateFloat64NaN_ieee(__float64 a, __float64 b)
{
#ifdef NO_SIGNALLING
   return __float64_default_nan;
#else
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __float64_is_nan_ieee(a);
   aIsSignalingNaN = __float64_is_signaling_nan_ieee(a);
   bIsNaN = __float64_is_nan_ieee(b);
   bIsSignalingNaN = __float64_is_signaling_nan_ieee(b);
   a |= LIT64(0x0008000000000000);
   b |= LIT64(0x0008000000000000);
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificand64_ieee(a, b);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificand64_ieee(a, b);
   }
   else
   {
      return b;
   }
#endif
}

#ifdef FLOATX80

/*----------------------------------------------------------------------------
| The pattern for a default generated extended double-precision NaN.  The
| `high' and `low' values hold the most- and least-significant bits,
| respectively.
*----------------------------------------------------------------------------*/
#define __floatx80_default_nan_high 0xFFFF
#define __floatx80_default_nan_low LIT64(0xC000000000000000)

/*----------------------------------------------------------------------------
| Returns 1 if the extended double-precision floating-point value `a' is a
| NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __floatx80_is_nan(__floatx80 a)
{
   return ((a.high & 0x7FFF) == 0x7FFF) && (__bits64)(a.low << 1);
}

/*----------------------------------------------------------------------------
| Returns 1 if the extended double-precision floating-point value `a' is a
| signaling NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __floatx80_is_signaling_nan(__floatx80 a)
{
   __bits64 aLow;

   aLow = a.low & ~LIT64(0x4000000000000000);
   return ((a.high & 0x7FFF) == 0x7FFF) && (__bits64)(aLow << 1) && (a.low == aLow);
}

/*----------------------------------------------------------------------------
| Returns the result of converting the extended double-precision floating-
| point NaN `a' to the canonical NaN format.  If `a' is a signaling NaN, the
| invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __floatx80ToCommonNaN(__floatx80 a)
{
   __commonNaNT z;

   if(__floatx80_is_signaling_nan(a))
      __float_raise(float_flag_invalid);
   z.sign = a.high >> 15;
   z.low = 0;
   z.high = a.low << 1;
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the extended
| double-precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __floatx80 __commonNaNToFloatx80(__commonNaNT a)
{
   __floatx80 z;

   z.low = LIT64(0xC000000000000000) | (a.high >> 1);
   z.high = (((__bits16)a.sign) << 15) | 0x7FFF;
   return z;
}

static __FORCE_INLINE __floatx80 __LargerSignificandx80(__floatx80 a, __floatx80 b)
{
   if(a.low < b.low)
      return b;
   if(b.low < a.low)
      return a;
   return (a.high < b.high) ? a : b;
}

/*----------------------------------------------------------------------------
| Takes two extended double-precision floating-point values `a' and `b', one
| of which is a NaN, and returns the appropriate NaN result.  If either `a' or
| `b' is a signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __floatx80 __propagateFloatx80NaN(__floatx80 a, __floatx80 b)
{
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __floatx80_is_nan(a);
   aIsSignalingNaN = __floatx80_is_signaling_nan(a);
   bIsNaN = __floatx80_is_nan(b);
   bIsSignalingNaN = __floatx80_is_signaling_nan(b);
   a.low |= LIT64(0xC000000000000000);
   b.low |= LIT64(0xC000000000000000);
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificandx80(a, b);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificandx80(a, b);
   }
   else
   {
      return b;
   }
}

#endif

#ifdef FLOAT128

/*----------------------------------------------------------------------------
| The pattern for a default generated quadruple-precision NaN.  The `high' and
| `low' values hold the most- and least-significant bits, respectively.
*----------------------------------------------------------------------------*/
#define __float128_default_nan_high LIT64(0xFFFF800000000000)
#define __float128_default_nan_low LIT64(0x0000000000000000)

/*----------------------------------------------------------------------------
| Returns 1 if the quadruple-precision floating-point value `a' is a NaN;
| otherwise returns 0.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __flag __float128_is_nan(__float128 a)
{
   return (LIT64(0xFFFE000000000000) <= (__bits64)(a.high << 1)) && (a.low || (a.high & LIT64(0x0000FFFFFFFFFFFF)));
}

/*----------------------------------------------------------------------------
| Returns 1 if the quadruple-precision floating-point value `a' is a
| signaling NaN; otherwise returns 0.
*----------------------------------------------------------------------------*/

__flag __float128_is_signaling_nan(__float128 a)
{
   return (((a.high >> 47) & 0xFFFF) == 0xFFFE) && (a.low || (a.high & LIT64(0x00007FFFFFFFFFFF)));
}

/*----------------------------------------------------------------------------
| Returns the result of converting the quadruple-precision floating-point NaN
| `a' to the canonical NaN format.  If `a' is a signaling NaN, the invalid
| exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __commonNaNT __float128ToCommonNaN(__float128 a)
{
   __commonNaNT z;

   if(__float128_is_signaling_nan(a))
      __float_raise(float_flag_invalid);
   z.sign = a.high >> 63;
   __shortShift128Left(a.high, a.low, 16, &z.high, &z.low);
   return z;
}

/*----------------------------------------------------------------------------
| Returns the result of converting the canonical NaN `a' to the quadruple-
| precision floating-point format.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float128 __commonNaNToFloat128(__commonNaNT a)
{
   __float128 z;

   __shift128Right(a.high, a.low, 16, &z.high, &z.low);
   z.high |= (((__bits64)a.sign) << 63) | LIT64(0x7FFF800000000000);
   return z;
}

static __FORCE_INLINE __float128 __LargerSignificand128(__float128 a, __float128 b)
{
   if(__lt128(a.high << 1, a.low, b.high << 1, b.low))
      return b;
   if(__lt128(b.high << 1, b.low, a.high << 1, a.low))
      return a;
   return (a.high < b.high) ? a : b;
}

/*----------------------------------------------------------------------------
| Takes two quadruple-precision floating-point values `a' and `b', one of
| which is a NaN, and returns the appropriate NaN result.  If either `a' or
| `b' is a signaling NaN, the invalid exception is raised.
*----------------------------------------------------------------------------*/

static __FORCE_INLINE __float128 __propagateFloat128NaN(__float128 a, __float128 b)
{
   __flag aIsNaN, aIsSignalingNaN, bIsNaN, bIsSignalingNaN;

   aIsNaN = __float128_is_nan(a);
   aIsSignalingNaN = __float128_is_signaling_nan(a);
   bIsNaN = __float128_is_nan(b);
   bIsSignalingNaN = __float128_is_signaling_nan(b);
   a.high |= LIT64(0x0000800000000000);
   b.high |= LIT64(0x0000800000000000);
   if(aIsSignalingNaN | bIsSignalingNaN)
      __float_raise(float_flag_invalid);
   if(aIsSignalingNaN)
   {
      if(bIsSignalingNaN)
         return __LargerSignificand128(a, b);
      return bIsNaN ? b : a;
   }
   else if(aIsNaN)
   {
      if(bIsSignalingNaN | !bIsNaN)
         return a;
      return __LargerSignificand128(a, b);
   }
   else
   {
      return b;
   }
}

#endif
