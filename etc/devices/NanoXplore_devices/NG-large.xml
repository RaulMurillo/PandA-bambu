<?xml version="1.0"?>
<synthesis>
   <flow name="Synthesis">
      <step id="nxpython_flow" config="nxpython_flow"/>
   </flow>
   <flow name="Characterization">
      <step id="nxpython_flow" config="nxpython_flow"/>
   </flow>
   <nxpython config="nxpython_flow">
      <cmd name="import os"/>
      <cmd name="import sys"/>
      <cmd name="import math"/>
      <cmd name="try:"/>
      <cmd name="    from StringIO import StringIO ## for Python 2"/>
      <cmd name="except ImportError:"/>
      <cmd name="    from io import StringIO ## for Python 3"/>
      <cmd name="from os import path"/>
      <cmd name="NXMAPversion=2"/>
      <cmd name="try:"/>
      <cmd name="    from nanoxmap import * ## for nxMap 2.9.7"/>
      <cmd name="except ImportError:"/>
      <cmd name="    from nxmap import *"/>
      <cmd name="    NXMAPversion=3"/>
      <cmd name="print(NXMAPversion)"/>
      <cmd name="prjEXT='.nxm'"/>
      <cmd name="if NXMAPversion == 3:"/>
      <cmd name="    prjEXT='.nym'"/>

      <cmd name="from nanoxmap import *"/>
      <cmd name="result = StringIO()"/>
      <cmd name="dir = &quot;.&quot;"/>
      <cmd name="if path.exists(dir + '/pads.py'):" condition="!${__connect_iob__}"/>
      <cmd name="    os.remove(dir + '/pads.py')" condition="!${__connect_iob__}"/>
      <cmd name="sys.path.append(dir)"/>
      <cmd name="project = createProject(dir)"/>
      <cmd name="project.setVariantName('NG-LARGE-EMBEDDED')" condition="!${__connect_iob__}"/>
      <cmd name="project.setVariantName('NG-LARGE')" condition="${__connect_iob__}"/>
      <cmd name="project.setTopCellName('${__top_id__}')"/>
      <cmd name="project.addFiles('${__VHDL_library__}', [${__nxpython_sources_macro_list__}])" condition="${__has_VHDL_library__}"/>
      <cmd name="project.addFiles([${__nxpython_sources_macro_list__}])" condition="!${__has_VHDL_library__}"/>
      <cmd name="project.setOptions({'ManageAsynchronousReadPort': 'Yes', 'ManageUnconnectedOutputs': 'Ground', 'ManageUnconnectedSignals': 'Ground','DefaultRAMMapping': 'RAM', 'MaxRegisterCount': '12500'})"/>
      <cmd name="project.createClock('getClockNet(${__clk_name__})', '${__clk_name__}', int(math.floor(float(${__clk_period__}) * float(1000))))"/>
      <cmd name="from ${__backend_script_extensions__} import ${__backend_script_extensions__}" condition="${__has_script_extensions__}"/>
      <cmd name="if path.exists(dir + '/pads.py'):"/>
      <cmd name="    from pads import pads"/>
      <cmd name="    project.addPads(pads)"/>
      <cmd name="project.save('native'+prjEXT)"/>
      <cmd name="if not project.synthesize():"/>
      <cmd name="    sys.exit(1)"/>
      <cmd name="project.save('synthesized'+prjEXT)"/>
      <cmd name="if not project.place():"/>
      <cmd name="    sys.exit(1)"/>
      <cmd name="project.save('placed'+prjEXT)"/>
      <cmd name="if NXMAPversion == 2 and not path.exists(dir + '/pads.py'):"/>
      <cmd name="    project.savePorts('pads.py')"/>
      <cmd name="if not project.route():"/>
      <cmd name="    sys.exit(1)"/>
      <cmd name="project.save('routed'+prjEXT)"/>
      <cmd name="analyzer = project.createAnalyzer()"/>
      <cmd name="analyzer.launch()"/>
      <cmd name="project.generateBitstream('bitfile.nxb')"/>
      <cmd name="#print 'Errors: ', getErrorCount()"/>
      <cmd name="#print 'Warnings: ', getWarningCount()"/>

      <cmd name="FunctionalElements=&quot;&quot;"/>
      <cmd name="LUTs=&quot;&quot;"/>
      <cmd name="TotalRegisters=&quot;&quot;"/>
      <cmd name="TotalMemBlocks=&quot;&quot;"/>
      <cmd name="TotalIOPins=0"/>
      <cmd name="TotalDSPs=&quot;&quot;"/>
      <cmd name="TotPower=&quot;0&quot;"/>
      <cmd name="design_slack=&quot;0&quot;"/>
      <cmd name="if NXMAPversion == 3:"/>
      <cmd name="    if path.exists(dir + '/logsPython/progress.rpt'):"/>
      <cmd name="        fr = open(dir + '/logsPython/progress.rpt', &quot;r&quot;)"/>
      <cmd name="if NXMAPversion == 2:"/>
      <cmd name="    if path.exists(dir + '/logs/resources.log'):"/>
      <cmd name="        fr = open(dir + '/logs/resources.log', &quot;r&quot;)"/>
      <cmd name="    elif path.exists(dir + '/logs/general.log'):"/>
      <cmd name="        fr = open(dir + '/logs/general.log', &quot;r&quot;)"/>

      <cmd name="resources_lines = fr.readlines()"/>
      <cmd name="for i in range(len(resources_lines)):"/>
      <cmd name="    if &quot;The following table details the use of FEs.&quot; in resources_lines[i]:"/>
      <cmd name="        trimmed=resources_lines[i+6].lstrip()[1:].lstrip()[1:].lstrip()"/>
      <cmd name="        trimmed=trimmed[:trimmed.index('/')]"/>
      <cmd name="        FunctionalElements=trimmed"/>
      <cmd name="    elif &quot;Estimated FE occupancy is &quot; in resources_lines[i]:"/>
      <cmd name="        trimmed=resources_lines[i]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('is '):][3:]"/>
      <cmd name="        trimmed=trimmed[:trimmed.index('/')]"/>
      <cmd name="        FunctionalElements=trimmed"/>
      <cmd name="    elif &quot;The following table lists the number of registers for each instance type&quot; in resources_lines[i]:"/>
      <cmd name="        trimmed=resources_lines[i+6].lstrip()[1:].lstrip()[1:].lstrip()"/>
      <cmd name="        trimmed=trimmed[:trimmed.index(' ')]"/>
      <cmd name="        TotalRegisters=trimmed"/>
      <cmd name="    elif &quot;Reporting routed project&quot; in resources_lines[i]:"/>
      <cmd name="        trimmed=resources_lines[i+7].lstrip()[1:].lstrip()[1:].lstrip()"/>
      <cmd name="        if NXMAPversion == 3:"/>
      <cmd name="            LUTs=trimmed[:trimmed.index('/')]"/>
      <cmd name="        if NXMAPversion == 2:"/>
      <cmd name="            LUTs=trimmed[:trimmed.index(' ')]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        if NXMAPversion == 3:"/>
      <cmd name="            trimmed=trimmed.lstrip()"/>
      <cmd name="            TotalRegisters=trimmed[:trimmed.index('/')]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed.lstrip()"/>
      <cmd name="        TotalDSPs=trimmed[:trimmed.index('/')]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed.lstrip()"/>
      <cmd name="        TotalMemBlocks=trimmed.lstrip()[:trimmed.index('/')]"/>
      <cmd name="    elif &quot;List of Pins&quot; in resources_lines[i]:"/>
      <cmd name="        trimmed=resources_lines[i+5].lstrip()[1:].lstrip()[1:].lstrip()"/>
      <cmd name="        TotalIOPins=int(trimmed[:trimmed.index(' ')])"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:].lstrip()"/>
      <cmd name="        TotalIOPins=TotalIOPins+int(trimmed[:trimmed.index(' ')])"/>
      <cmd name="fr.close()"/>
      <cmd name="if NXMAPversion == 3:"/>
      <cmd name="    fr = open(dir + '/logsPython/Timing_Constraints_Report_Routed_typical.timing', &quot;r&quot;)"/>
      <cmd name="if NXMAPversion == 2:"/>
      <cmd name="    fr = open(dir + '/logs/Timing_Constraints_Report.timing', &quot;r&quot;)"/>
      <cmd name="timing_lines = fr.readlines()"/>
      <cmd name="for i in range(len(timing_lines)):"/>
      <cmd name="    if &quot;Reporting timing constraints&quot; in timing_lines[i]:"/>
      <cmd name="        trimmed=timing_lines[i+8].lstrip()[1:].lstrip()[1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed[trimmed.index('|')+1:]"/>
      <cmd name="        trimmed=trimmed.lstrip()"/>
      <cmd name="        trimmed=trimmed[:trimmed.index('n')] if 'n' in trimmed else '-1.735'"/>
      <cmd name="        design_slack=trimmed.replace(',', '.')"/>
      <cmd name="fr.close()"/>
      <cmd name="fw = open('/${__nxpython_report__}', &quot;w&quot;)"/>
      <cmd name="fw.write('&lt;?xml version=\\&quot;1.0\\&quot;?&gt;\\n')"/>
      <cmd name="fw.write('&lt;document&gt;\\n')"/>
      <cmd name="fw.write('  &lt;application&gt;\\n')"/>
      <cmd name="fw.write('    &lt;section stringID=\\&quot;NANOXPLORE_SYNTHESIS_SUMMARY\\&quot;&gt;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_FE\\&quot; value=\\&quot;'+FunctionalElements+'\\&quot;/&gt;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_LUTS\\&quot; value=\\&quot;'+LUTs+'\\&quot;/&gt;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_REGISTERS\\&quot; value=\\&quot;'+TotalRegisters+'\\&quot;/&gt;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_MEM\\&quot; value=\\&quot;'+TotalMemBlocks+'\\&quot;/&gt;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_IOPIN\\&quot; value=\\&quot;'+str(TotalIOPins)+'\\&quot;/&gt;&quot;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_DSPS\\&quot; value=\\&quot;'+TotalDSPs+'\\&quot;/&gt;&quot;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_POWER\\&quot; value=\\&quot;'+TotPower+'\\&quot;/&gt;&quot;\\n')"/>
      <cmd name="fw.write('      &lt;item stringID=\\&quot;NANOXPLORE_SLACK\&quot; value=\\&quot;'+design_slack+'\\&quot;/&gt;\\n')"/>
      <cmd name="fw.write('    &lt;/section&gt;\\n')"/>
      <cmd name="fw.write('  &lt;/application&gt;\\n')"/>
      <cmd name="fw.write('&lt;/document&gt;\\n')"/>
      <cmd name="fw.close()"/>
   </nxpython>
</synthesis>
